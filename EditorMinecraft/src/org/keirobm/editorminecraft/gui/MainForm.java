/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.keirobm.editorminecraft.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.keirobm.editorminecraft.Main;
import org.keirobm.editorminecraft.model.Bloque;
import org.keirobm.editorminecraft.model.BloqueDoble;
import org.keirobm.editorminecraft.model.Capa;
import org.keirobm.editorminecraft.model.EtiquetaTexto;
import org.keirobm.editorminecraft.model.EtiquetaTexto.Estilo;
import org.keirobm.editorminecraft.model.Plano;

/**
 *
 * @author Angel
 */
public class MainForm extends javax.swing.JFrame {
    //###################################################################
    //###		ENUMERATIONS            		      ###
    //###################################################################
    public static enum TipoHerramientas {

        PONER_BLOQUES,
        RELLENAR,
        PONER_TEXTO,
        MOVER_BLOQUES,
        MOVER_TEXTO,
        BORRAR_BLOQUES,
        BORRAR_TEXTO,
        MEDIR,
        EXPORTAR_IMAGEN,
        VACIAR,
        ;
    }
    
    //###################################################################
    //###		CONSTANTS               		      ###
    //###################################################################   
    private static final int NUM_COLS_BUTTON = 4;
    private static final int SIZE_BUTTON = 32;
    private static final int PADDING_X = 20;
    private static final int PADDING_Y = 20;
    
    //###########################################################
    //##		MEMBERS                               ###
    //###########################################################
    //--------------------- GUI Controls ----------------
    private JSplitPane centerPane;
    private JSplitPane leftPane;
    private final CanvasPlano mDibujo = new CanvasPlano();
    
    //--------------------- Variables  ------------------
    private TipoHerramientas mHerramientaActual = TipoHerramientas.PONER_BLOQUES;
    private Bloque mBloque = Bloque.TIERRA;
    private final Plano mPlano = new Plano();
    private Color mColor = Color.BLACK;
    private Estilo mEstilo = Estilo.NORMAL;
    private int mCapaActual = 0;
    private EventosRaton mCanvasPlano_EventosRaton = new EventosRaton();
    private boolean guardado=false;
    private String filename = null;
    


    //###########################################################
    //##		CONSTRUCTORS                          ###
    //###########################################################
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        initIU();
        initialize();
    }

    //###########################################################
    //##		PROPERTIES                            ###
    //###########################################################
    
    
    
    //###########################################################
    //##		METHODS                               ###
    //###########################################################
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBloques = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelTerreno = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelMinerales = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        panelConstruccion = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        panelIngenieria = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        panelJardineria = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        panelMuebles = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        panelGanaderia = new javax.swing.JPanel();
        panelHerramientas = new javax.swing.JPanel();
        btPonerBloques = new javax.swing.JButton();
        btPonerTexto = new javax.swing.JButton();
        btRellenar = new javax.swing.JButton();
        btVaciar = new javax.swing.JButton();
        btMoverBloques = new javax.swing.JButton();
        btMoverTexto = new javax.swing.JButton();
        btBorrarBloques = new javax.swing.JButton();
        btBorrarTexto = new javax.swing.JButton();
        btMedir = new javax.swing.JButton();
        btExportarImagen = new javax.swing.JButton();
        panelDibujo = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        btCapaAtras = new javax.swing.JButton();
        lbCapaActual = new javax.swing.JLabel();
        btCapaAdelante = new javax.swing.JButton();
        btAddCapaVacia = new javax.swing.JButton();
        btAddCapaCopia = new javax.swing.JButton();
        btLimpiarCapa = new javax.swing.JButton();
        btBorrarCapa = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        tbTexto = new javax.swing.JTextField();
        btColor = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbEstilo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        spTamLetra = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        lbHerramientaActual = new javax.swing.JLabel();
        lbBloqueActual = new javax.swing.JLabel();
        lbMedidas = new javax.swing.JLabel();
        lbPosActual = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuNuevo = new javax.swing.JMenuItem();
        mnuAbrir = new javax.swing.JMenuItem();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuGuardarComo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuSalir = new javax.swing.JMenuItem();
        mnuCapa = new javax.swing.JMenu();
        mnuAddCapaVacia = new javax.swing.JMenuItem();
        mnuAddCapaCopia = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuExportarArea = new javax.swing.JMenuItem();
        mnuExportarCapa = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        mnuVerProteccionPS = new javax.swing.JCheckBoxMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        mnuLimpiarCapa = new javax.swing.JMenuItem();
        mnuBorrarCapa = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuIntercambiarCapas = new javax.swing.JMenuItem();
        mnuClonarCapas = new javax.swing.JMenuItem();
        mnuEstadistica = new javax.swing.JMenu();
        mnuHacerEstadistica = new javax.swing.JMenuItem();
        mnuAyuda = new javax.swing.JMenu();
        mnuManual = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mnuAcercaDe = new javax.swing.JMenuItem();

        javax.swing.GroupLayout panelTerrenoLayout = new javax.swing.GroupLayout(panelTerreno);
        panelTerreno.setLayout(panelTerrenoLayout);
        panelTerrenoLayout.setHorizontalGroup(
            panelTerrenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        panelTerrenoLayout.setVerticalGroup(
            panelTerrenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panelTerreno);

        panelBloques.addTab("", Main.getIcon("res/icons16.png", 0, 14), jScrollPane1, "Bloques de Terreno");

        javax.swing.GroupLayout panelMineralesLayout = new javax.swing.GroupLayout(panelMinerales);
        panelMinerales.setLayout(panelMineralesLayout);
        panelMineralesLayout.setHorizontalGroup(
            panelMineralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        panelMineralesLayout.setVerticalGroup(
            panelMineralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(panelMinerales);

        panelBloques.addTab("", Main.getIcon("res/icons16.png", 1, 2), jScrollPane2, "Bloques de Minerales");

        javax.swing.GroupLayout panelConstruccionLayout = new javax.swing.GroupLayout(panelConstruccion);
        panelConstruccion.setLayout(panelConstruccionLayout);
        panelConstruccionLayout.setHorizontalGroup(
            panelConstruccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        panelConstruccionLayout.setVerticalGroup(
            panelConstruccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(panelConstruccion);

        panelBloques.addTab("", Main.getIcon("res/icons16.png", 1, 0), jScrollPane3, "Bloques de Construccion");

        javax.swing.GroupLayout panelIngenieriaLayout = new javax.swing.GroupLayout(panelIngenieria);
        panelIngenieria.setLayout(panelIngenieriaLayout);
        panelIngenieriaLayout.setHorizontalGroup(
            panelIngenieriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        panelIngenieriaLayout.setVerticalGroup(
            panelIngenieriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(panelIngenieria);

        panelBloques.addTab("", Main.getIcon("res/icons16.png", 1, 1), jScrollPane4, "Bloques de Ingenieria");

        javax.swing.GroupLayout panelJardineriaLayout = new javax.swing.GroupLayout(panelJardineria);
        panelJardineria.setLayout(panelJardineriaLayout);
        panelJardineriaLayout.setHorizontalGroup(
            panelJardineriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        panelJardineriaLayout.setVerticalGroup(
            panelJardineriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        jScrollPane5.setViewportView(panelJardineria);

        panelBloques.addTab("", Main.getIcon("res/icons16.png", 0, 15), jScrollPane5, "Bloques de Jardineria");

        javax.swing.GroupLayout panelMueblesLayout = new javax.swing.GroupLayout(panelMuebles);
        panelMuebles.setLayout(panelMueblesLayout);
        panelMueblesLayout.setHorizontalGroup(
            panelMueblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        panelMueblesLayout.setVerticalGroup(
            panelMueblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        jScrollPane6.setViewportView(panelMuebles);

        panelBloques.addTab("", Main.getIcon("res/icons16.png", 1, 13), jScrollPane6, "Muebles");

        javax.swing.GroupLayout panelGanaderiaLayout = new javax.swing.GroupLayout(panelGanaderia);
        panelGanaderia.setLayout(panelGanaderiaLayout);
        panelGanaderiaLayout.setHorizontalGroup(
            panelGanaderiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        panelGanaderiaLayout.setVerticalGroup(
            panelGanaderiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        jScrollPane7.setViewportView(panelGanaderia);

        panelBloques.addTab("", Main.getIcon("res/icons16.png", 2, 7), jScrollPane7, "Ganaderia");

        panelHerramientas.setLayout(new java.awt.GridLayout(0, 1));

        btPonerBloques.setIcon(Main.getIcon("res/icons16.png", 1, 4));
        btPonerBloques.setText("Poner Bloques");
        btPonerBloques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPonerBloquesActionPerformed(evt);
            }
        });
        panelHerramientas.add(btPonerBloques);

        btPonerTexto.setIcon(Main.getIcon("res/icons16.png", 1, 5));
        btPonerTexto.setText("Poner Texto");
        btPonerTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPonerTextoActionPerformed(evt);
            }
        });
        panelHerramientas.add(btPonerTexto);

        btRellenar.setIcon(Main.getIcon("res/icons16.png", 1, 3));
        btRellenar.setText("Rellenar");
        btRellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRellenarActionPerformed(evt);
            }
        });
        panelHerramientas.add(btRellenar);

        btVaciar.setIcon(Main.getIcon("res/icons16.png", 2, 8));
        btVaciar.setText("Vaciar");
        btVaciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVaciarActionPerformed(evt);
            }
        });
        panelHerramientas.add(btVaciar);

        btMoverBloques.setIcon(Main.getIcon("res/icons16.png", 1, 8));
        btMoverBloques.setText("Mover Bloques");
        btMoverBloques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMoverBloquesActionPerformed(evt);
            }
        });
        panelHerramientas.add(btMoverBloques);

        btMoverTexto.setIcon(Main.getIcon("res/icons16.png", 1, 7));
        btMoverTexto.setText("Mover Texto");
        btMoverTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMoverTextoActionPerformed(evt);
            }
        });
        panelHerramientas.add(btMoverTexto);

        btBorrarBloques.setIcon(Main.getIcon("res/icons16.png", 1, 9));
        btBorrarBloques.setText("Borrar Bloques");
        btBorrarBloques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBorrarBloquesActionPerformed(evt);
            }
        });
        panelHerramientas.add(btBorrarBloques);

        btBorrarTexto.setIcon(Main.getIcon("res/icons16.png", 1, 10));
        btBorrarTexto.setText("Borrar Texto");
        btBorrarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBorrarTextoActionPerformed(evt);
            }
        });
        panelHerramientas.add(btBorrarTexto);

        btMedir.setIcon(Main.getIcon("res/icons16.png", 1, 11));
        btMedir.setText("Medir");
        btMedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMedirActionPerformed(evt);
            }
        });
        panelHerramientas.add(btMedir);

        btExportarImagen.setIcon(Main.getIcon("res/icons16.png", 1, 12));
        btExportarImagen.setText("Exportar a Imagen");
        btExportarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportarImagenActionPerformed(evt);
            }
        });
        panelHerramientas.add(btExportarImagen);

        panelDibujo.setLayout(new java.awt.BorderLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor Minecraft");
        setIconImage(Main.getImage("res/Minecraft_48.png"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel1.setText("Capa");
        jToolBar1.add(jLabel1);

        btCapaAtras.setIcon(Main.getIcon("res/icons16.png", 0, 3));
        btCapaAtras.setToolTipText("Va a la capa anterior");
        btCapaAtras.setFocusable(false);
        btCapaAtras.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCapaAtras.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCapaAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCapaAtrasActionPerformed(evt);
            }
        });
        jToolBar1.add(btCapaAtras);

        lbCapaActual.setText("1 de 1");
        jToolBar1.add(lbCapaActual);

        btCapaAdelante.setIcon(Main.getIcon("res/icons16.png", 0, 4));
        btCapaAdelante.setToolTipText("Va a la capa siguiente");
        btCapaAdelante.setFocusable(false);
        btCapaAdelante.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCapaAdelante.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCapaAdelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCapaAdelanteActionPerformed(evt);
            }
        });
        jToolBar1.add(btCapaAdelante);

        btAddCapaVacia.setIcon(Main.getIcon("res/icons16.png", 0, 6));
        btAddCapaVacia.setToolTipText("Añade una capa vacia");
        btAddCapaVacia.setFocusable(false);
        btAddCapaVacia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btAddCapaVacia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btAddCapaVacia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddCapaVaciaActionPerformed(evt);
            }
        });
        jToolBar1.add(btAddCapaVacia);

        btAddCapaCopia.setIcon(Main.getIcon("res/icons16.png", 0, 8));
        btAddCapaCopia.setToolTipText("Añade una nueva capa que es una copia de esta capa");
        btAddCapaCopia.setFocusable(false);
        btAddCapaCopia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btAddCapaCopia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btAddCapaCopia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddCapaCopiaActionPerformed(evt);
            }
        });
        jToolBar1.add(btAddCapaCopia);

        btLimpiarCapa.setIcon(Main.getIcon("res/icons16.png", 0, 7));
        btLimpiarCapa.setToolTipText("Quita todo el contenido de esta capa");
        btLimpiarCapa.setFocusable(false);
        btLimpiarCapa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btLimpiarCapa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btLimpiarCapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarCapaActionPerformed(evt);
            }
        });
        jToolBar1.add(btLimpiarCapa);

        btBorrarCapa.setIcon(Main.getIcon("res/icons16.png", 0, 12));
        btBorrarCapa.setToolTipText("Borra esta capa");
        btBorrarCapa.setFocusable(false);
        btBorrarCapa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btBorrarCapa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btBorrarCapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBorrarCapaActionPerformed(evt);
            }
        });
        jToolBar1.add(btBorrarCapa);
        jToolBar1.add(jSeparator6);

        jLabel2.setText("Etiquetas de Texto");
        jToolBar1.add(jLabel2);

        tbTexto.setText("Escriba aqui el texto para las etiquetas");
        tbTexto.setMinimumSize(new java.awt.Dimension(100, 20));
        jToolBar1.add(tbTexto);

        btColor.setIcon(Main.getIcon("res/icons16.png", 0, 9));
        btColor.setText("Color");
        btColor.setFocusable(false);
        btColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btColorActionPerformed(evt);
            }
        });
        jToolBar1.add(btColor);

        jLabel3.setText("Estilo");
        jToolBar1.add(jLabel3);

        cbEstilo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Negrita", "Cursiva" }));
        jToolBar1.add(cbEstilo);

        jLabel4.setText("Tamaño");
        jToolBar1.add(jLabel4);

        spTamLetra.setModel(new javax.swing.SpinnerNumberModel(10, 1, 100, 1));
        spTamLetra.setMinimumSize(new java.awt.Dimension(50, 20));
        jToolBar1.add(spTamLetra);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jPanel1.setMinimumSize(new java.awt.Dimension(100, 20));
        jPanel1.setLayout(new java.awt.GridLayout(1, 3));
        jPanel1.add(lbHerramientaActual);
        jPanel1.add(lbBloqueActual);
        jPanel1.add(lbMedidas);
        jPanel1.add(lbPosActual);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        mnuArchivo.setText("Archivo");

        mnuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuNuevo.setText("Nuevo");
        mnuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNuevoActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuNuevo);

        mnuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mnuAbrir.setText("Abrir");
        mnuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAbrirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuAbrir);

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuGuardarComo.setText("Guardar Como");
        mnuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarComoActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardarComo);
        mnuArchivo.add(jSeparator1);

        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuSalir);

        jMenuBar1.add(mnuArchivo);

        mnuCapa.setText("Capa");

        mnuAddCapaVacia.setText("Insertar Capa Vacia");
        mnuAddCapaVacia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddCapaVaciaActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuAddCapaVacia);

        mnuAddCapaCopia.setText("Insertar Capa Clonando Actual");
        mnuAddCapaCopia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddCapaCopiaActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuAddCapaCopia);
        mnuCapa.add(jSeparator3);

        mnuExportarArea.setText("Exportar Area Visible como Imagen");
        mnuExportarArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportarAreaActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuExportarArea);

        mnuExportarCapa.setText("Exportar Capa como Imagen");
        mnuExportarCapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportarCapaActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuExportarCapa);
        mnuCapa.add(jSeparator7);

        mnuVerProteccionPS.setText("¿Ver Area de Proteccion de las PS?");
        mnuVerProteccionPS.setToolTipText("");
        mnuVerProteccionPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuVerProteccionPSActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuVerProteccionPS);
        mnuCapa.add(jSeparator8);

        mnuLimpiarCapa.setText("Limpiar Capa");
        mnuLimpiarCapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLimpiarCapaActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuLimpiarCapa);

        mnuBorrarCapa.setText("Borrar Capa");
        mnuBorrarCapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBorrarCapaActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuBorrarCapa);
        mnuCapa.add(jSeparator2);

        mnuIntercambiarCapas.setText("Intercambiar Capas...");
        mnuIntercambiarCapas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIntercambiarCapasActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuIntercambiarCapas);

        mnuClonarCapas.setText("Clonar Capas...");
        mnuClonarCapas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClonarCapasActionPerformed(evt);
            }
        });
        mnuCapa.add(mnuClonarCapas);

        jMenuBar1.add(mnuCapa);

        mnuEstadistica.setText("Estadistica");

        mnuHacerEstadistica.setText("Realizar Estadistica");
        mnuHacerEstadistica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuHacerEstadisticaActionPerformed(evt);
            }
        });
        mnuEstadistica.add(mnuHacerEstadistica);

        jMenuBar1.add(mnuEstadistica);

        mnuAyuda.setText("Ayuda");

        mnuManual.setText("Leer Manual");
        mnuManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuManualActionPerformed(evt);
            }
        });
        mnuAyuda.add(mnuManual);
        mnuAyuda.add(jSeparator4);

        mnuAcercaDe.setText("Acerca de...");
        mnuAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAcercaDeActionPerformed(evt);
            }
        });
        mnuAyuda.add(mnuAcercaDe);

        jMenuBar1.add(mnuAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    /**
     * Inicializa los elementos de la interfaz grafica
     */
    private void initIU() {
        mDibujo.addMouseListener(mCanvasPlano_EventosRaton);
        mDibujo.addMouseMotionListener(mCanvasPlano_EventosRaton);
        mDibujo.setBackground(Color.WHITE);
        
        
        panelDibujo.add(mDibujo, BorderLayout.CENTER);
        
        leftPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, panelBloques, panelHerramientas);
        leftPane.setResizeWeight(0.95);
        centerPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPane, panelDibujo);
        
        getContentPane().add(centerPane, BorderLayout.CENTER);
        
        
        
        
        setSize(800, 600);
    }
    
    private void initialize() {
        mPlano.addCapaVacia();
        mCapaActual=0;
        mDibujo.setCapa(mPlano.getCapa(mCapaActual));
        
        generarBotones();
        updateEtiquetas();
    }
    
    /**
     * Genera los botones de los bloques del Minecraft
     */
    private void generarBotones() {
        int[] cantidad = new int[7];
        int x, y;
        for (Bloque blq : Bloque.values()) {
            BloqueButton btBlq = new BloqueButton("", blq);
            btBlq.setIcon(Main.getIcon("res/terrain.png", blq.getFila(), blq.getColumna()));
            btBlq.setToolTipText(blq.toString());
            btBlq.addActionListener(mBotonesBloques_Click);
            if (BloqueDoble.esBloqueDoble(blq)) {
                if(BloqueDoble.esPrimerBloqueDoble(blq)) {
                    BloqueDoble blq_dbl = BloqueDoble.get(blq);
                    switch(blq_dbl) {
                        case CAMA_ABJ:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 2, 5));
                            break;
                        case CAMA_ARR:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 2, 4));
                            break;
                        case CAMA_DRH:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 2, 6));
                            break;
                        case CAMA_IZQ:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 1, 15));
                            break;
                        case PUERTA_HIERRO:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 1, 14));
                            break;
                        case PUERTA_HRR_DRH:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 2, 3));
                            break;
                        case PUERTA_HRR_IZQ:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 2, 2));
                            break;
                        case PUERTA_MADERA:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 1, 13));
                            break;
                        case PUERTA_MAD_DRH:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 2, 1));
                            break;
                        case PUERTA_MAD_IZQ:
                            btBlq.setIcon(Main.getIcon("res/icons16.png", 2, 0));
                            break;
                    }
                }
                else
                    continue;
            }
            int i=0;
            JPanel panel=null;
            switch (blq.getCategoria()) {
                case TERRENO:
                    i=0;
                    panel = panelTerreno;
                    break;
                case CONSTRUCCION:
                    i=1;
                    panel = panelConstruccion;
                    break;
                case INGENIERIA:
                    i=2;
                    panel = panelIngenieria;
                    break;
                case JARDINERIA:
                    i=3;
                    panel = panelJardineria;
                    break;
                case MINERALES:
                    i=4;
                    panel = panelMinerales;
                    break;
                case MUEBLES:
                    i=5;
                    panel = panelMuebles;
                    break;
                case GANADERIA:
                    i=6;
                    panel = panelGanaderia;
                    break;
            }
            x = (cantidad[i] % NUM_COLS_BUTTON) * (SIZE_BUTTON + PADDING_X);
            y = (cantidad[i] / NUM_COLS_BUTTON) * (SIZE_BUTTON + PADDING_Y);
            btBlq.setLocation(x, y);
            btBlq.setBounds(x, y, 16, 16);
            panel.add(btBlq);
            cantidad[i]++;
        }
    }
    
    /**
     * Actualiza los labels correspondientes a la capa actual, al bloque actual
     * seleccionado y a la herramienta actual seleccionada
     */
    private void updateEtiquetas() {
        lbCapaActual.setText((mCapaActual + 1) + " de " + mPlano.cantidadCapas());
        lbBloqueActual.setText(mBloque.toString());
        lbBloqueActual.setIcon(Main.getIcon("res/terrain.png", mBloque.getFila(), mBloque.getColumna()));
        lbHerramientaActual.setText(mHerramientaActual.toString());
        btColor.setIcon(Main.getColorIcon(mColor));
        
        int fila, col;
        switch (mHerramientaActual) {
            case PONER_BLOQUES:
                fila = 1;
                col = 4;
                break;
            case PONER_TEXTO:
                fila = 1;
                col = 5;
                break;
            case MOVER_BLOQUES:
                fila = 1;
                col = 8;
                break;
            case MOVER_TEXTO:
                fila = 1;
                col = 7;
                break;
            case RELLENAR:
                fila = 1;
                col = 3;
                break;
            case BORRAR_BLOQUES:
                fila = 1;
                col = 9;
                break;
            case BORRAR_TEXTO:
                fila = 1;
                col = 10;
                break;
            case MEDIR:
                fila = 1;
                col = 11;
                break;
            case EXPORTAR_IMAGEN:
                fila = 1;
                col = 12;
                break;
            case VACIAR:
                fila=2;
                col = 8;
                break;
            default:
                fila = 1;
                col = 12;
                break;
        }
        lbHerramientaActual.setIcon(Main.getIcon("res/icons16.png", fila, col));
    }
    
    /**
     * Recoge el valor del ComboBox cbEstilo y actualiza la variable del Estilo
     * de Fuente apropiadamente
     */
    private void updateCbEstilo() {
        if (cbEstilo.getSelectedItem().equals("Normal")) {
            mEstilo = Estilo.NORMAL;
        } else if (cbEstilo.getSelectedItem().equals("Negrita")) {
            mEstilo = Estilo.NEGRITA;
        } else if (cbEstilo.getSelectedItem().equals("Cursiva")) {
            mEstilo = Estilo.CURSIVA;
        } else {
            mEstilo = Estilo.NORMAL;
        }
    }
    
    //###########################################################
    //##		EVENTS                                ###
    //###########################################################
    private ActionListener mBotonesBloques_Click = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            BloqueButton btBlq = (BloqueButton) e.getSource();
            mBloque = btBlq.getBloque();
            if (mHerramientaActual != TipoHerramientas.PONER_BLOQUES && mHerramientaActual != TipoHerramientas.RELLENAR) {
                mHerramientaActual = TipoHerramientas.PONER_BLOQUES;
            }
            updateEtiquetas();
        }
    };
    
    private void pedirConfirmacionGuardar() {
        int returnVal = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios?", "Confirmacion de salida", JOptionPane.YES_NO_OPTION);
        if (returnVal==JOptionPane.YES_OPTION) {
            mnuGuardarActionPerformed(null);
        }
        
    }

    //--------------  Eventos del Raton y Drag-&-Drop para cuando se clica en el Area del Plano --------------------------------	
    class EventosRaton implements MouseListener, MouseMotionListener {

        Bloque blq = null;
        EtiquetaTexto et = null;
        boolean arrastrando = false;
        int fila_1, col_1;

        @Override
        public void mouseDragged(MouseEvent e) {
            mouseMoved(e);
            accionesCanvasPlano(e);
            if (arrastrando) {
                mDibujo.posicionActualCursor(e.getX(), e.getY());
                mDibujo.redibujar();
            }
        }

        @Override
        public void mouseMoved(MouseEvent e) {
            int fila = (e.getY()/Bloque.ALTO) + mDibujo.getFilaOrigen();
            int col = (e.getX()/Bloque.ANCHO) + mDibujo.getColumnaOrigen();
            
            lbPosActual.setText("Fila: " + fila + " Col: " + col);
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            int fila = (e.getY() / 16) + mDibujo.getFilaOrigen();
            int col = (e.getX() / 16) + mDibujo.getColumnaOrigen();
            Bloque[] blqs;
            Bloque b;
            accionesCanvasPlano(e);
            switch(mHerramientaActual) {
                case RELLENAR:
                    blqs = mDibujo.getCapa().getBloque(fila, col);
                    b = null;
                    if (blqs!=null && blqs[1]!=null)        b=blqs[1];
                    else if (blqs!=null && blqs[1]==null && blqs[0]!=null)      b=blqs[0];
                    mDibujo.rellenarConBloque(b, mBloque, fila, col);
                    mDibujo.redibujar();
                    guardado=false;
                    break;
                case VACIAR:    
                    blqs = mDibujo.getCapa().getBloque(fila, col);
                    b = null;
                    if (blqs!=null && blqs[1]!=null)        b=blqs[1];
                    else if (blqs!=null && blqs[1]==null && blqs[0]!=null)      b=blqs[0];
                    mDibujo.rellenarConBloque(b, null, fila, col);
                    mDibujo.redibujar();
                    guardado=false;
                    break;
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {
            int fila = (e.getY() / 16) + mDibujo.getFilaOrigen();
            int col = (e.getX() / 16) + mDibujo.getColumnaOrigen();
            Capa capa = mPlano.getCapa(mCapaActual);

            if (mHerramientaActual == TipoHerramientas.MOVER_BLOQUES) {
                Bloque[] blqs = capa.getBloque(fila, col);
                if (blqs!=null) {
                    blq = (blqs[1]==null) ? blqs[0] : blqs[1];
                    BloqueDoble blq_dbl = BloqueDoble.get(blq);
                    if (blq_dbl!=null && blq==blq_dbl.getBloque2())     blq=null;
                    
                    if (blq != null && !(blq_dbl!=null && blq==blq_dbl.getBloque2())) {
                        capa.popBloque(fila, col);
                        mDibujo.marcarDragDrop(e.getX(), e.getY(), mHerramientaActual, blq, null);
                        mDibujo.redibujar();
                        arrastrando = true;
                        guardado=false;
                    }
                }
            }
            else if (mHerramientaActual == TipoHerramientas.MOVER_TEXTO) {
                et = capa.getEtiqueta(fila, col);
                if (et!=null) {
                    capa.delEtiqueta(fila, col);
                    mDibujo.marcarDragDrop(e.getX(), e.getY(), mHerramientaActual, null, et);
                    mDibujo.redibujar();
                    arrastrando=true;
                    guardado=false;
                }
            }
            else if (mHerramientaActual == TipoHerramientas.MEDIR || mHerramientaActual == TipoHerramientas.EXPORTAR_IMAGEN) {
                fila_1 = fila;
                col_1 = col;
                mDibujo.marcarDragDrop(e.getX(), e.getY(), mHerramientaActual, null, null);
                mDibujo.redibujar();
                arrastrando = true;
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            int fila = (e.getY() / 16) + mDibujo.getFilaOrigen();
            int col = (e.getX() / 16) + mDibujo.getColumnaOrigen();
            Capa capa = mPlano.getCapa(mCapaActual);

            if (mHerramientaActual == TipoHerramientas.MOVER_BLOQUES) {
                if (blq != null) {
                    capa.setBloque(fila, col, blq);
                    arrastrando = false;
                    mDibujo.quitarDragDrop();
                    mDibujo.redibujar();
                    blq = null;
                }
            }
            else if (mHerramientaActual == TipoHerramientas.MOVER_TEXTO) {
                if (et != null) {
                    capa.setEtiqueta(fila, col, et);
                    arrastrando = false;
                    mDibujo.quitarDragDrop();
                    mDibujo.redibujar();
                    et = null;
                }
            }
            else if (mHerramientaActual == TipoHerramientas.MEDIR) {
                if (arrastrando) {
                    int area_ancho = Math.abs(col-col_1)+1;
                    int area_alto = Math.abs(fila-fila_1)+1;
                    lbMedidas.setText("Area medida: " + area_ancho + " x " + area_alto + " bloques");
                    arrastrando=false;
                    mDibujo.quitarDragDrop();
                    mDibujo.redibujar();
                }
            }
            else if (mHerramientaActual == TipoHerramientas.EXPORTAR_IMAGEN) {
                if (arrastrando) {
                    arrastrando=false;
                    BufferedImage img = mDibujo.exportarAreaSeleccionada(col_1*Bloque.ANCHO, fila_1*Bloque.ALTO, 
                            col*Bloque.ANCHO, fila*Bloque.ALTO);
                    
                    if (img!=null) {
                        JFileChooser saveImageDlg = new JFileChooser(new File("./images"));
                        saveImageDlg.setFileFilter(new FileNameExtensionFilter("Imagenes PNG", "png"));
                        int returnVal = saveImageDlg.showSaveDialog(MainForm.this);
                        if (returnVal == JFileChooser.APPROVE_OPTION) {
                            String png_filename = saveImageDlg.getSelectedFile().getAbsolutePath();
                            if (!png_filename.endsWith(".png")) {
                                png_filename += ".png";
                            }
                            try {
                                ImageIO.write(img, "png", new File(png_filename));
                            } catch (IOException ex) {
                                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                                JOptionPane.showMessageDialog(MainForm.this, ex.getMessage(), "No se ha podido guardar imagen", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                    
                    mDibujo.quitarDragDrop();
                    mDibujo.redibujar();
                }
            }
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            // TODO Auto-generated method stub
        }

        @Override
        public void mouseExited(MouseEvent e) {
            // TODO Auto-generated method stub
        }
    }

    private void accionesCanvasPlano(MouseEvent e) {
        int fila = (e.getY() / 16) + mDibujo.getFilaOrigen();
        int col = (e.getX() / 16) + mDibujo.getColumnaOrigen();
        Capa capa = mPlano.getCapa(mCapaActual);

        switch (mHerramientaActual) {
            case PONER_BLOQUES:
                capa.setBloque(fila, col, mBloque);
                mDibujo.redibujar();
                guardado=false;
                break;
            case PONER_TEXTO:
                updateCbEstilo();
                EtiquetaTexto et = new EtiquetaTexto(tbTexto.getText(), mColor, mEstilo, ((Integer) spTamLetra.getValue()).intValue());
                capa.setEtiqueta(fila, col, et);
                mDibujo.redibujar();
                guardado=false;
                break;
            case BORRAR_BLOQUES:
                capa.popBloque(fila, col);
                mDibujo.redibujar();
                guardado=false;
                break;
            case BORRAR_TEXTO:
                capa.delEtiqueta(fila, col);
                mDibujo.redibujar();
                guardado=false;
                break;
        }
    }
	
	//-------------------- Eventos autogenerados -------------------------------------------
	private void btPonerBloquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPonerBloquesActionPerformed
        mHerramientaActual = TipoHerramientas.PONER_BLOQUES;
        updateEtiquetas();
    }//GEN-LAST:event_btPonerBloquesActionPerformed

    private void btPonerTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPonerTextoActionPerformed
        mHerramientaActual = TipoHerramientas.PONER_TEXTO;
        updateEtiquetas();
    }//GEN-LAST:event_btPonerTextoActionPerformed

    private void btRellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRellenarActionPerformed
        mHerramientaActual = TipoHerramientas.RELLENAR;
        updateEtiquetas();
    }//GEN-LAST:event_btRellenarActionPerformed

    private void btMoverBloquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMoverBloquesActionPerformed
        mHerramientaActual = TipoHerramientas.MOVER_BLOQUES;
        updateEtiquetas();
    }//GEN-LAST:event_btMoverBloquesActionPerformed

    private void btMoverTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMoverTextoActionPerformed
        mHerramientaActual = TipoHerramientas.MOVER_TEXTO;
        updateEtiquetas();
    }//GEN-LAST:event_btMoverTextoActionPerformed

    private void btBorrarBloquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBorrarBloquesActionPerformed
        mHerramientaActual = TipoHerramientas.BORRAR_BLOQUES;
        updateEtiquetas();
    }//GEN-LAST:event_btBorrarBloquesActionPerformed

    private void btBorrarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBorrarTextoActionPerformed
        mHerramientaActual = TipoHerramientas.BORRAR_TEXTO;
        updateEtiquetas();
    }//GEN-LAST:event_btBorrarTextoActionPerformed

    private void btMedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMedirActionPerformed
        mHerramientaActual = TipoHerramientas.MEDIR;
        updateEtiquetas();
    }//GEN-LAST:event_btMedirActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        if(filename!=null) {
            try {
                mPlano.guardarAArchivo(filename);
            } catch (Exception ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en el guardado del archivo", JOptionPane.ERROR_MESSAGE);
            }
        }
        else {
          mnuGuardarComoActionPerformed(evt);  
        }        
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAbrirActionPerformed
        if (!guardado)
            pedirConfirmacionGuardar();
        
        JFileChooser openFileDialog = new JFileChooser(new File("./planes"));
        openFileDialog.setFileFilter(new FileNameExtensionFilter("Planos Editor Minecraft", "mpl"));
        int returnVal = openFileDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            filename = openFileDialog.getSelectedFile().getAbsolutePath();
            try {
                mPlano.cargarArchivo(filename);
            } catch (Exception ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en la carga del archivo", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        if (mPlano.cantidadCapas()>0) {
            mCapaActual = 0;
            mDibujo.setCapa(mPlano.getCapa(0));
            mDibujo.redibujar();            
        }
        updateEtiquetas();
        guardado=true;
    }//GEN-LAST:event_mnuAbrirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!guardado) {
            pedirConfirmacionGuardar();
        }
    }//GEN-LAST:event_formWindowClosing

    private void mnuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarComoActionPerformed
        JFileChooser saveFileDialog = new JFileChooser(new File("./planes"));
        saveFileDialog.setFileFilter(new FileNameExtensionFilter("Planos Editor Minecraft", "mpl"));
        int returnVal = saveFileDialog.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filename = saveFileDialog.getSelectedFile().getAbsolutePath();
            if (!filename.endsWith(".mpl")) {
                filename += ".mpl";
            }
            try {
                mPlano.guardarAArchivo(filename);
            } catch (Exception ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en el guardado del archivo", JOptionPane.ERROR_MESSAGE);
            }
            this.filename = filename;
            guardado=true;
        }
    }//GEN-LAST:event_mnuGuardarComoActionPerformed

    private void mnuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNuevoActionPerformed
        if(!guardado)
            pedirConfirmacionGuardar();
        
        mPlano.quitarCapas();
        mPlano.addCapaVacia();
        mCapaActual = 0;
        mDibujo.setCapa(mPlano.getCapa(0));
        mDibujo.redibujar();
        filename = null;
        guardado = false;
        updateEtiquetas();
    }//GEN-LAST:event_mnuNuevoActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        formWindowClosing(null);
        this.dispose();
    }//GEN-LAST:event_mnuSalirActionPerformed

    private void btColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btColorActionPerformed
        mColor = JColorChooser.showDialog(this, "Elija un color para el texto", mColor);
        updateEtiquetas();
    }//GEN-LAST:event_btColorActionPerformed

    private void btCapaAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCapaAtrasActionPerformed
        if(mCapaActual>0) {
            mCapaActual--;
            mDibujo.setCapa(mPlano.getCapa(mCapaActual));
            mDibujo.setFilaOrigen(0);
            mDibujo.setColumnaOrigen(0);
            updateEtiquetas();
            mDibujo.redibujar();            
        }
    }//GEN-LAST:event_btCapaAtrasActionPerformed

    private void btCapaAdelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCapaAdelanteActionPerformed
        if(mCapaActual<mPlano.cantidadCapas()-1) {
            mCapaActual++;
            mDibujo.setCapa(mPlano.getCapa(mCapaActual));
            mDibujo.setFilaOrigen(0);
            mDibujo.setColumnaOrigen(0);
            updateEtiquetas();
            mDibujo.redibujar();            
        }
    }//GEN-LAST:event_btCapaAdelanteActionPerformed

    private void btAddCapaVaciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddCapaVaciaActionPerformed
        mPlano.addCapaVacia();
        updateEtiquetas();
        guardado=false;
    }//GEN-LAST:event_btAddCapaVaciaActionPerformed

    private void btAddCapaCopiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddCapaCopiaActionPerformed
        mPlano.addCapaClonando(mPlano.getCapa(mCapaActual));
        updateEtiquetas();
        guardado=false;
    }//GEN-LAST:event_btAddCapaCopiaActionPerformed

    private void btLimpiarCapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarCapaActionPerformed
        mPlano.getCapa(mCapaActual).clearBloques();
        mPlano.getCapa(mCapaActual).clearEtiquetas();
        mDibujo.redibujar();
        guardado=false;
    }//GEN-LAST:event_btLimpiarCapaActionPerformed

    private void btBorrarCapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBorrarCapaActionPerformed
        if (mPlano.cantidadCapas()>1) {
            mPlano.delCapa(mCapaActual);
            if (mCapaActual >= mPlano.cantidadCapas()) {
                mCapaActual = mPlano.cantidadCapas() - 1;
            }
            mDibujo.setCapa(mPlano.getCapa(mCapaActual));
            mDibujo.setFilaOrigen(0);
            mDibujo.setColumnaOrigen(0);
            updateEtiquetas();
            mDibujo.redibujar();
            guardado = false;
        } else {
            btLimpiarCapaActionPerformed(evt);
        }
    }//GEN-LAST:event_btBorrarCapaActionPerformed

    private void mnuAddCapaVaciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddCapaVaciaActionPerformed
        btAddCapaVaciaActionPerformed(evt);
    }//GEN-LAST:event_mnuAddCapaVaciaActionPerformed

    private void mnuAddCapaCopiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddCapaCopiaActionPerformed
        btAddCapaCopiaActionPerformed(evt);
    }//GEN-LAST:event_mnuAddCapaCopiaActionPerformed

    private void mnuLimpiarCapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLimpiarCapaActionPerformed
        btLimpiarCapaActionPerformed(evt);
    }//GEN-LAST:event_mnuLimpiarCapaActionPerformed

    private void mnuBorrarCapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBorrarCapaActionPerformed
        btBorrarCapaActionPerformed(evt);
    }//GEN-LAST:event_mnuBorrarCapaActionPerformed

    private void mnuIntercambiarCapasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIntercambiarCapasActionPerformed
        DialogIntercambiarCapas dlgIntercambiarCapas = new DialogIntercambiarCapas(this, true, mPlano);
        dlgIntercambiarCapas.setVisible(true);
        mDibujo.setCapa(mPlano.getCapa(mCapaActual));
        mDibujo.redibujar();
    }//GEN-LAST:event_mnuIntercambiarCapasActionPerformed

    private void mnuClonarCapasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClonarCapasActionPerformed
        DialogClonarCapas dlgClonarCapas = new DialogClonarCapas(this, true, mPlano);
        dlgClonarCapas.setVisible(true);
        mDibujo.setCapa(mPlano.getCapa(mCapaActual));
        mDibujo.redibujar();
    }//GEN-LAST:event_mnuClonarCapasActionPerformed

    private void btExportarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportarImagenActionPerformed
        mHerramientaActual = TipoHerramientas.EXPORTAR_IMAGEN;
        updateEtiquetas();
    }//GEN-LAST:event_btExportarImagenActionPerformed

    private void mnuExportarAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportarAreaActionPerformed
        BufferedImage img = mDibujo.exportarAreaVisible();
        
        if (img != null) {
            JFileChooser saveImageDlg = new JFileChooser(new File("./images"));
            saveImageDlg.setFileFilter(new FileNameExtensionFilter("Imagenes PNG", "png"));
            int returnVal = saveImageDlg.showSaveDialog(MainForm.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String png_filename = saveImageDlg.getSelectedFile().getAbsolutePath();
                if (!png_filename.endsWith(".png")) {
                    png_filename += ".png";
                }
                try {
                    ImageIO.write(img, "png", new File(png_filename));
                } catch (IOException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(MainForm.this, ex.getMessage(), "No se ha podido guardar imagen", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_mnuExportarAreaActionPerformed

    private void mnuExportarCapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportarCapaActionPerformed
        BufferedImage img = mDibujo.exportarCapa();
        
        if (img != null) {
            JFileChooser saveImageDlg = new JFileChooser(new File("./images"));
            saveImageDlg.setFileFilter(new FileNameExtensionFilter("Imagenes PNG", "png"));
            int returnVal = saveImageDlg.showSaveDialog(MainForm.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String png_filename = saveImageDlg.getSelectedFile().getAbsolutePath();
                if (!png_filename.endsWith(".png")) {
                    png_filename += ".png";
                }
                try {
                    ImageIO.write(img, "png", new File(png_filename));
                } catch (IOException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(MainForm.this, ex.getMessage(), "No se ha podido guardar imagen", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_mnuExportarCapaActionPerformed

    private void mnuVerProteccionPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuVerProteccionPSActionPerformed
        mDibujo.setVerProteccionPS(mnuVerProteccionPS.isSelected());
        mDibujo.redibujar();
    }//GEN-LAST:event_mnuVerProteccionPSActionPerformed

    private void mnuHacerEstadisticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHacerEstadisticaActionPerformed
        FormEstadistica frmEstadistica = new FormEstadistica(this, true, mPlano);
        frmEstadistica.setVisible(true);
    }//GEN-LAST:event_mnuHacerEstadisticaActionPerformed

    private void mnuManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuManualActionPerformed
        FormManual frmManual = new FormManual(this, true);
        frmManual.setVisible(true);
    }//GEN-LAST:event_mnuManualActionPerformed

    private void btVaciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVaciarActionPerformed
        mHerramientaActual = TipoHerramientas.VACIAR;
        updateEtiquetas();
    }//GEN-LAST:event_btVaciarActionPerformed

    private void mnuAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAcercaDeActionPerformed
        FormAcercaDe frmAcercaDe = new FormAcercaDe(this, true);
        frmAcercaDe.setVisible(true);
    }//GEN-LAST:event_mnuAcercaDeActionPerformed
	
    //-------------------------------------------------------------------------------------------------------------------------------
    
    
    
    
    //###########################################################
    //##		CONTROLS                              ###
    //###########################################################   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddCapaCopia;
    private javax.swing.JButton btAddCapaVacia;
    private javax.swing.JButton btBorrarBloques;
    private javax.swing.JButton btBorrarCapa;
    private javax.swing.JButton btBorrarTexto;
    private javax.swing.JButton btCapaAdelante;
    private javax.swing.JButton btCapaAtras;
    private javax.swing.JButton btColor;
    private javax.swing.JButton btExportarImagen;
    private javax.swing.JButton btLimpiarCapa;
    private javax.swing.JButton btMedir;
    private javax.swing.JButton btMoverBloques;
    private javax.swing.JButton btMoverTexto;
    private javax.swing.JButton btPonerBloques;
    private javax.swing.JButton btPonerTexto;
    private javax.swing.JButton btRellenar;
    private javax.swing.JButton btVaciar;
    private javax.swing.JComboBox cbEstilo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lbBloqueActual;
    private javax.swing.JLabel lbCapaActual;
    private javax.swing.JLabel lbHerramientaActual;
    private javax.swing.JLabel lbMedidas;
    private javax.swing.JLabel lbPosActual;
    private javax.swing.JMenuItem mnuAbrir;
    private javax.swing.JMenuItem mnuAcercaDe;
    private javax.swing.JMenuItem mnuAddCapaCopia;
    private javax.swing.JMenuItem mnuAddCapaVacia;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenu mnuAyuda;
    private javax.swing.JMenuItem mnuBorrarCapa;
    private javax.swing.JMenu mnuCapa;
    private javax.swing.JMenuItem mnuClonarCapas;
    private javax.swing.JMenu mnuEstadistica;
    private javax.swing.JMenuItem mnuExportarArea;
    private javax.swing.JMenuItem mnuExportarCapa;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuGuardarComo;
    private javax.swing.JMenuItem mnuHacerEstadistica;
    private javax.swing.JMenuItem mnuIntercambiarCapas;
    private javax.swing.JMenuItem mnuLimpiarCapa;
    private javax.swing.JMenuItem mnuManual;
    private javax.swing.JMenuItem mnuNuevo;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JCheckBoxMenuItem mnuVerProteccionPS;
    private javax.swing.JTabbedPane panelBloques;
    private javax.swing.JPanel panelConstruccion;
    private javax.swing.JPanel panelDibujo;
    private javax.swing.JPanel panelGanaderia;
    private javax.swing.JPanel panelHerramientas;
    private javax.swing.JPanel panelIngenieria;
    private javax.swing.JPanel panelJardineria;
    private javax.swing.JPanel panelMinerales;
    private javax.swing.JPanel panelMuebles;
    private javax.swing.JPanel panelTerreno;
    private javax.swing.JSpinner spTamLetra;
    private javax.swing.JTextField tbTexto;
    // End of variables declaration//GEN-END:variables
}
